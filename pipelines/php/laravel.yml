---
resource_types:

- name: github-approval
  type: registry-image
  source:
    repository: docker.robojackets.org/robojackets/concourse-github-approval-resource
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))

- name: github-check
  type: registry-image
  source:
    repository: docker.robojackets.org/robojackets/concourse-github-check-resource
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))
  defaults:
    repository: ((source-repository))
    pull_request: pull-request
    token: ((((github-host-dashes))/token.token))

- name: github-merge
  type: registry-image
  source:
    repository: docker.robojackets.org/robojackets/concourse-github-merge-resource
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))

- name: github-webhook
  type: registry-image
  source:
    repository: docker.robojackets.org/robojackets/concourse-github-webhook-resource
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))

- name: github-deployment
  type: registry-image
  source:
    repository: docker.robojackets.org/robojackets/concourse-github-deployment-resource
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))

- name: pull-request
  type: registry-image
  source:
    repository: teliaoss/github-pr-resource

- name: slack
  type: registry-image
  source:
    repository: mockersf/concourse-slack-notifier

resources:

- name: concourse-pipeline-library
  public: true
  type: git
  icon: github
  source:
    uri: https://github.com/RoboJackets/concourse-pipeline-library
    branch: main
    username: x-access-token
    password: ((github-com/token.token))

- name: ((source-repository))
  type: git
  public: true
  icon: github
  source:
    uri: https://((github-host))/RoboJackets/((source-repository))
    branch: ((base-branch))
    username: x-access-token
    password: ((((github-host-dashes))/token.token))
  webhook_token: ((webhook-token))

- name: pull-request
  public: true
  type: pull-request
  icon: source-pull
  webhook_token: ((webhook-token))
  source:
    repository: RoboJackets/((source-repository))
    access_token: ((((github-host-dashes))/token.token))
    v3_endpoint: ((github-rest-api-endpoint))
    v4_endpoint: ((github-graphql-api-endpoint))
    base_branch: ((base-branch))
    disable_forks: true

- name: composer-install-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: Composer Install
    resource_name: composer-install-check

- name: npm-install-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: NPM Install
    resource_name: npm-install-check

- name: npm-build-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: NPM Build
    resource_name: npm-build-check

- name: codesniffer-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: CodeSniffer
    resource_name: codesniffer-check
    annotations_format: codesniffer

- name: phan-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: Phan
    resource_name: phan-check
    annotations_format: phan

- name: phpstan-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: PHPStan
    resource_name: phpstan-check
    annotations_format: phpstan

- name: psalm-check
  public: true
  type: github-check
  icon: check-bold
  source:
    check_name: Psalm
    resource_name: psalm-check
    annotations_format: psalm

- name: webhooks
  public: true
  type: github-webhook
  icon: webhook
  source:
    github_token: ((((github-host-dashes))/token.token))
    webhook_token: ((webhook-token))
    resources:
      ((source-repository)):
        github_uri: https://((github-host))/RoboJackets/((source-repository))
        events:
        - push
      pull-request:
        github_uri: https://((github-host))/RoboJackets/((source-repository))
        events:
        - push
        - pull_request

- name: approve-pull-request
  public: true
  type: github-approval
  icon: check-circle
  source:
    token: ((((github-host-dashes))/token.token))
    pull_request: pull-request

- name: merge-pull-request
  public: true
  type: github-merge
  icon: source-merge
  source:
    token: ((((github-host-dashes))/token.token))
    pull_request: pull-request

- name: deployment
  public: true
  type: github-deployment
  icon: ferry
  source:
    repository: ((source-repository))
    token: ((((github-host-dashes))/token.token))
    resource_name: deployment

- name: slack
  public: true
  type: slack
  icon: slack
  source:
    url: ((slack-webhook))

jobs:

- name: build-((base-branch))
  public: true
  plan:

  - in_parallel:

    - get: concourse-pipeline-library

    - get: ((source-repository))
      trigger: true

  - in_parallel:
    - put: composer-install-check
      inputs:
      - ((source-repository))
    - put: npm-install-check
      inputs:
      - ((source-repository))

  - in_parallel:
    - do:
      - task: npm-ci-dev
        file: concourse-pipeline-library/tasks/javascript/npm-ci-dev.yml
        input_mapping:
          source: ((source-repository))
        on_failure:
          put: npm-install-check
          params:
            conclusion: failure
          inputs:
          - npm-install-check
          - ((source-repository))
        on_abort:
          put: npm-install-check
          params:
            conclusion: cancelled
          inputs:
          - npm-install-check
          - ((source-repository))
        on_error:
          put: npm-install-check
          params:
            conclusion: action_required
          inputs:
          - npm-install-check
          - ((source-repository))
      - in_parallel:
        - put: npm-install-check
          params:
            conclusion: success
          inputs:
          - npm-install-check
          - ((source-repository))
        - put: npm-build-check
          inputs:
          - ((source-repository))
      - task: npm-run-dev
        file: concourse-pipeline-library/tasks/javascript/npm-run-dev.yml
        input_mapping:
          source: ((source-repository))
        on_success:
          put: npm-build-check
          params:
            conclusion: success
          inputs:
          - npm-build-check
          - ((source-repository))
        on_failure:
          put: npm-build-check
          params:
            conclusion: failure
          inputs:
          - npm-build-check
          - ((source-repository))
        on_abort:
          put: npm-build-check
          params:
            conclusion: cancelled
          inputs:
          - npm-build-check
          - ((source-repository))
        on_error:
          put: npm-build-check
          params:
            conclusion: action_required
          inputs:
          - npm-build-check
          - ((source-repository))
    - do:
      - in_parallel:
        - task: composer-install-dev
          file: concourse-pipeline-library/tasks/php/composer-install-dev.yml
          params:
            COMPOSER_AUTH: ((composer-auth))
          input_mapping:
            source: ((source-repository))
        - task: composer-verify-lock
          file: concourse-pipeline-library/tasks/php/composer-verify-lock.yml
          params:
            COMPOSER_AUTH: ((composer-auth))
          input_mapping:
            source: ((source-repository))
        on_failure:
          put: composer-install-check
          params:
            conclusion: failure
            title: Failed to install dependencies
            summary: Review the output within Concourse.
          inputs:
          - composer-install-check
          - ((source-repository))
        on_abort:
          put: composer-install-check
          params:
            conclusion: cancelled
          inputs:
          - composer-install-check
          - ((source-repository))
        on_error:
          put: composer-install-check
          params:
            conclusion: action_required
          inputs:
          - composer-install-check
          - ((source-repository))

      - in_parallel:
        - put: composer-install-check
          params:
            conclusion: success
            title: Dependencies installed
            summary: Composer successfully installed development dependencies.
          inputs:
          - composer-install-check
          - ((source-repository))
        - do:
          - put: codesniffer-check
            inputs:
            - ((source-repository))
          - task: codesniffer
            file: concourse-pipeline-library/tasks/php/codesniffer.yml
            vars:
              codesniffer-config: ((codesniffer-config))
            input_mapping:
              source: ((source-repository))
            on_success:
              put: codesniffer-check
              params:
                conclusion: success
              inputs:
              - codesniffer
              - codesniffer-check
              - ((source-repository))
            on_failure:
              put: codesniffer-check
              params:
                conclusion: failure
              inputs:
              - codesniffer
              - codesniffer-check
              - ((source-repository))
            on_abort:
              put: codesniffer-check
              params:
                conclusion: cancelled
              inputs:
              - codesniffer
              - codesniffer-check
              - ((source-repository))
            on_error:
              put: codesniffer-check
              params:
                conclusion: action_required
              inputs:
              - codesniffer
              - codesniffer-check
              - ((source-repository))
        - do:
          - put: phan-check
            inputs:
            - ((source-repository))
          - task: phan
            file: concourse-pipeline-library/tasks/php/phan-((phan-mode)).yml
            input_mapping:
              source: ((source-repository))
            on_success:
              put: phan-check
              params:
                conclusion: success
              inputs:
              - phan
              - phan-check
              - ((source-repository))
            on_failure:
              put: phan-check
              params:
                conclusion: failure
              inputs:
              - phan
              - phan-check
              - ((source-repository))
            on_abort:
              put: phan-check
              params:
                conclusion: cancelled
              inputs:
              - phan
              - phan-check
              - ((source-repository))
            on_error:
              put: phan-check
              params:
                conclusion: action_required
              inputs:
              - phan
              - phan-check
              - ((source-repository))
        - do:
          - put: phpstan-check
            inputs:
            - ((source-repository))
          - task: phpstan
            file: concourse-pipeline-library/tasks/php/phpstan.yml
            vars:
              phpstan-config: ((phpstan-config))
            input_mapping:
              source: ((source-repository))
            on_success:
              put: phpstan-check
              params:
                conclusion: success
              inputs:
              - phpstan
              - phpstan-check
              - ((source-repository))
            on_failure:
              put: phpstan-check
              params:
                conclusion: failure
              inputs:
              - phpstan
              - phpstan-check
              - ((source-repository))
            on_abort:
              put: phpstan-check
              params:
                conclusion: cancelled
              inputs:
              - phpstan
              - phpstan-check
              - ((source-repository))
            on_error:
              put: phpstan-check
              params:
                conclusion: action_required
              inputs:
              - phpstan
              - phpstan-check
              - ((source-repository))
        - do:
          - put: psalm-check
            inputs:
            - ((source-repository))
          - task: psalm
            file: concourse-pipeline-library/tasks/php/psalm.yml
            input_mapping:
              source: ((source-repository))
            on_success:
              put: psalm-check
              params:
                conclusion: success
              inputs:
              - psalm
              - psalm-check
              - ((source-repository))
            on_failure:
              put: psalm-check
              params:
                conclusion: failure
              inputs:
              - psalm
              - psalm-check
              - ((source-repository))
            on_abort:
              put: psalm-check
              params:
                conclusion: cancelled
              inputs:
              - psalm
              - psalm-check
              - ((source-repository))
            on_error:
              put: psalm-check
              params:
                conclusion: action_required
              inputs:
              - psalm
              - psalm-check
              - ((source-repository))

  - put: deployment
    params:
      environment: ((automatic-deployment-environment))
    inputs:
    - ((source-repository))

  - put: webhooks
    inputs: []

  on_success:
    put: slack
    params:
      alert_type: success
      mode: normal
    inputs: []
  on_failure:
    put: slack
    params:
      alert_type: failed
      mode: normal
    inputs: []
  on_abort:
    put: slack
    params:
      alert_type: aborted
      mode: normal
    inputs: []
  on_error:
    put: slack
    params:
      alert_type: failed
      mode: normal
      message: Task error, review logs
    inputs: []

- name: build-pull-request
  public: true
  plan:

  - in_parallel:

    - get: concourse-pipeline-library

    - get: pull-request
      trigger: true
      version: every
      params:
        integration_tool: checkout

  - in_parallel:
    - put: composer-install-check
      inputs:
      - pull-request
    - put: npm-install-check
      inputs:
      - pull-request

  - in_parallel:
    - do:
      - task: npm-ci-dev
        file: concourse-pipeline-library/tasks/javascript/npm-ci-dev.yml
        input_mapping:
          source: pull-request
        on_failure:
          put: npm-install-check
          params:
            conclusion: failure
          inputs:
          - npm-install-check
          - pull-request
        on_abort:
          put: npm-install-check
          params:
            conclusion: cancelled
          inputs:
          - npm-install-check
          - pull-request
        on_error:
          put: npm-install-check
          params:
            conclusion: action_required
          inputs:
          - npm-install-check
          - pull-request
      - in_parallel:
        - put: npm-install-check
          params:
            conclusion: success
          inputs:
          - npm-install-check
          - pull-request
        - put: npm-build-check
          inputs:
          - pull-request
      - task: npm-run-dev
        file: concourse-pipeline-library/tasks/javascript/npm-run-dev.yml
        input_mapping:
          source: pull-request
        on_success:
          put: npm-build-check
          params:
            conclusion: success
          inputs:
          - npm-build-check
          - pull-request
        on_failure:
          put: npm-build-check
          params:
            conclusion: failure
          inputs:
          - npm-build-check
          - pull-request
        on_abort:
          put: npm-build-check
          params:
            conclusion: cancelled
          inputs:
          - npm-build-check
          - pull-request
        on_error:
          put: npm-build-check
          params:
            conclusion: action_required
          inputs:
          - npm-build-check
          - pull-request
    - do:
      - in_parallel:
        - task: composer-install-dev
          file: concourse-pipeline-library/tasks/php/composer-install-dev.yml
          params:
            COMPOSER_AUTH: ((composer-auth))
          input_mapping:
            source: pull-request
        - task: composer-verify-lock
          file: concourse-pipeline-library/tasks/php/composer-verify-lock.yml
          params:
            COMPOSER_AUTH: ((composer-auth))
          input_mapping:
            source: pull-request
        on_failure:
          put: composer-install-check
          params:
            conclusion: failure
            title: Failed to install dependencies
            summary: Review the output within Concourse.
          inputs:
          - composer-install-check
          - pull-request
        on_abort:
          put: composer-install-check
          params:
            conclusion: cancelled
          inputs:
          - composer-install-check
          - pull-request
        on_error:
          put: composer-install-check
          params:
            conclusion: action_required
          inputs:
          - composer-install-check
          - pull-request

      - in_parallel:
        - put: composer-install-check
          params:
            conclusion: success
            title: Dependencies installed
            summary: Composer successfully installed development dependencies.
          inputs:
          - composer-install-check
          - pull-request
        - do:
          - put: codesniffer-check
            inputs:
            - pull-request
          - task: codesniffer
            file: concourse-pipeline-library/tasks/php/codesniffer.yml
            vars:
              codesniffer-config: ((codesniffer-config))
            input_mapping:
              source: pull-request
            on_success:
              put: codesniffer-check
              params:
                conclusion: success
              inputs:
              - codesniffer
              - codesniffer-check
              - pull-request
            on_failure:
              put: codesniffer-check
              params:
                conclusion: failure
              inputs:
              - codesniffer
              - codesniffer-check
              - pull-request
            on_abort:
              put: codesniffer-check
              params:
                conclusion: cancelled
              inputs:
              - codesniffer
              - codesniffer-check
              - pull-request
            on_error:
              put: codesniffer-check
              params:
                conclusion: action_required
              inputs:
              - codesniffer
              - codesniffer-check
              - pull-request
        - do:
          - put: phan-check
            inputs:
            - pull-request
          - task: phan
            file: concourse-pipeline-library/tasks/php/phan-((phan-mode)).yml
            input_mapping:
              source: pull-request
            on_success:
              put: phan-check
              params:
                conclusion: success
              inputs:
              - phan
              - phan-check
              - pull-request
            on_failure:
              put: phan-check
              params:
                conclusion: failure
              inputs:
              - phan
              - phan-check
              - pull-request
            on_abort:
              put: phan-check
              params:
                conclusion: cancelled
              inputs:
              - phan
              - phan-check
              - pull-request
            on_error:
              put: phan-check
              params:
                conclusion: action_required
              inputs:
              - phan
              - phan-check
              - pull-request
        - do:
          - put: phpstan-check
            inputs:
            - pull-request
          - task: phpstan
            file: concourse-pipeline-library/tasks/php/phpstan.yml
            vars:
              phpstan-config: ((phpstan-config))
            input_mapping:
              source: pull-request
            on_success:
              put: phpstan-check
              params:
                conclusion: success
              inputs:
              - phpstan
              - phpstan-check
              - pull-request
            on_failure:
              put: phpstan-check
              params:
                conclusion: failure
              inputs:
              - phpstan
              - phpstan-check
              - pull-request
            on_abort:
              put: phpstan-check
              params:
                conclusion: cancelled
              inputs:
              - phpstan
              - phpstan-check
              - pull-request
            on_error:
              put: phpstan-check
              params:
                conclusion: action_required
              inputs:
              - phpstan
              - phpstan-check
              - pull-request
        - do:
          - put: psalm-check
            inputs:
            - pull-request
          - task: psalm
            file: concourse-pipeline-library/tasks/php/psalm.yml
            input_mapping:
              source: pull-request
            on_success:
              put: psalm-check
              params:
                conclusion: success
              inputs:
              - psalm
              - psalm-check
              - pull-request
            on_failure:
              put: psalm-check
              params:
                conclusion: failure
              inputs:
              - psalm
              - psalm-check
              - pull-request
            on_abort:
              put: psalm-check
              params:
                conclusion: cancelled
              inputs:
              - psalm
              - psalm-check
              - pull-request
            on_error:
              put: psalm-check
              params:
                conclusion: action_required
              inputs:
              - psalm
              - psalm-check
              - pull-request

  - put: approve-pull-request
    inputs:
    - pull-request

  - put: merge-pull-request
    inputs:
    - pull-request
