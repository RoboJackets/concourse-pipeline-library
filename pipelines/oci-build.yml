---
resource_types:

- name: github-check
  type: registry-image
  source:
    repository: docker.robojackets.org/robojackets/concourse-github-check-resource
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))

- name: pull-request
  type: registry-image
  source:
    repository: teliaoss/github-pr-resource

- name: slack
  type: registry-image
  source:
    repository: mockersf/concourse-slack-notifier

resources:

- name: concourse-pipeline-library
  public: true
  type: git
  icon: github
  source:
    uri: https://github.com/RoboJackets/concourse-pipeline-library
    branch: main
    username: x-access-token
    password: ((github-com/token))

- name: ((source-repository))
  type: git
  public: true
  icon: github
  source:
    uri: https://((github-host))/RoboJackets/((source-repository))
    branch: ((base-branch))
    username: x-access-token
    password: ((((github-host-dashes))/token))
  webhook_token: ((webhook-token))

- name: pull-request
  public: true
  type: pull-request
  icon: source-pull
  webhook_token: ((webhook-token))
  source:
    repository: RoboJackets/((source-repository))
    access_token: ((((github-host-dashes))/token))
    v3_endpoint: ((github-rest-api-endpoint))
    v4_endpoint: ((github-graphql-api-endpoint))
    base_branch: ((base-branch))
    disable_forks: true

- name: ((source-repository))-image
  type: registry-image
  public: true
  icon: docker
  source:
    repository: docker.robojackets.org/robojackets/((source-repository))
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))

- name: ((source-repository))-image-pull-request
  type: registry-image
  public: true
  icon: docker
  source:
    repository: docker.robojackets.org/robojackets/((source-repository))
    username: ((docker-robojackets-org.username))
    password: ((docker-robojackets-org.password))
    tag: pull-request

- name: ubuntu
  type: registry-image
  public: true
  icon: ubuntu
  source:
    repository: ubuntu

- name: build-check
  public: true
  type: github-check
  icon: check-bold
  source:
    repository: ((source-repository))
    token: ((((github-host-dashes))/token))
    check_name: OCI Build
    resource_name: build-check

- name: push-check
  public: true
  type: github-check
  icon: check-bold
  source:
    repository: ((source-repository))
    token: ((((github-host-dashes))/token))
    check_name: Push to Registry
    resource_name: push-check

- name: build-check-pull-request
  public: true
  type: github-check
  icon: check-bold
  source:
    repository: pull-request
    token: ((((github-host-dashes))/token))
    check_name: OCI Build
    resource_name: build-check-pull-request

- name: push-check-pull-request
  public: true
  type: github-check
  icon: check-bold
  source:
    repository: ((source-repository))
    token: ((((github-host-dashes))/token))
    check_name: Push to Registry
    resource_name: push-check-pull-request

- name: slack
  public: true
  type: slack
  icon: slack
  source:
    url: ((slack-webhook))

jobs:

- name: build-main
  public: true
  plan:

  - in_parallel:

    - get: concourse-pipeline-library

    - get: ((source-repository))
      trigger: true

    - get: ubuntu
      trigger: true

  - put: build-check
    inputs:
    - ((source-repository))

  - task: build
    file: concourse-pipeline-library/tasks/oci-build.yml
    input_mapping:
      source: ((source-repository))
    privileged: true
    timeout: 15m
    on_success:
      put: build-check
      params:
        conclusion: success
        title: Image built
        summary: The OCI image was built successfully.
      inputs:
      - build-check
      - ((source-repository))
    on_failure:
      put: build-check
      params:
        conclusion: failure
        title: Image failed to build
        summary: Review the output within Concourse.
      inputs:
      - build-check
      - ((source-repository))
    on_abort:
      put: build-check
      params:
        conclusion: cancelled
      inputs:
      - build-check
      - ((source-repository))
    on_error:
      put: build-check
      params:
        conclusion: action_required
      inputs:
      - build-check
      - ((source-repository))

  - put: push-check
    inputs:
    - ((source-repository))

  - put: ((source-repository))-image
    params:
      image: image/image.tar
    inputs: detect
    on_success:
      put: push-check
      params:
        conclusion: success
        title: Image pushed to registry
        summary: The image was successfully uploaded to the registry.
      inputs:
      - push-check
      - ((source-repository))
    on_failure:
      put: push-check
      params:
        conclusion: failure
        title: Image failed to push
        summary: Review the output within Concourse.
      inputs:
      - push-check
      - ((source-repository))
    on_abort:
      put: push-check
      params:
        conclusion: cancelled
      inputs:
      - push-check
      - ((source-repository))
    on_error:
      put: push-check
      params:
        conclusion: action_required
      inputs:
      - push-check
      - ((source-repository))

  on_success:
    put: slack
    params:
      alert_type: success
      mode: normal
    inputs: []
  on_failure:
    put: slack
    params:
      alert_type: failed
      mode: normal
    inputs: []
  on_abort:
    put: slack
    params:
      alert_type: aborted
      mode: normal
    inputs: []
  on_error:
    put: slack
    params:
      alert_type: failed
      mode: normal
      message: Task error, review logs
    inputs: []

- name: build-pull-request
  public: true
  plan:

  - in_parallel:

    - get: concourse-pipeline-library

    - get: pull-request
      trigger: true
      version: every
      params:
        integration_tool: checkout

  - put: build-check-pull-request
    inputs:
    - pull-request

  - task: build
    file: concourse-pipeline-library/tasks/oci-build.yml
    input_mapping:
      source: pull-request
    privileged: true
    timeout: 15m
    on_success:
      put: build-check-pull-request
      params:
        conclusion: success
        title: Image built successfully
        summary: The OCI image was built successfully.
      inputs:
      - pull-request
      - build-check-pull-request
    on_failure:
      put: build-check-pull-request
      params:
        conclusion: failure
        title: Image failed to build
        summary: Review the output within Concourse.
      inputs:
      - pull-request
      - build-check-pull-request
    on_abort:
      put: build-check-pull-request
      params:
        conclusion: cancelled
      inputs:
      - pull-request
      - build-check-pull-request
    on_error:
      put: build-check-pull-request
      params:
        conclusion: action_required
      inputs:
      - pull-request
      - build-check-pull-request

  - put: push-check-pull-request
    inputs:
    - pull-request

  - put: ((source-repository))-image-pull-request
    params:
      image: image/image.tar
      additional_tags: pull-request/.git/resource/author
    inputs: detect
    on_success:
      put: push-check-pull-request
      params:
        conclusion: success
        title: Image pushed to registry
        summary: The image was successfully uploaded to the registry.
      inputs:
      - push-check-pull-request
      - pull-request
    on_failure:
      put: push-check-pull-request
      params:
        conclusion: failure
        title: Image failed to push
        summary: Review the output within Concourse.
      inputs:
      - push-check-pull-request
      - pull-request
    on_abort:
      put: push-check-pull-request
      params:
        conclusion: cancelled
      inputs:
      - push-check-pull-request
      - pull-request
    on_error:
      put: push-check-pull-request
      params:
        conclusion: action_required
      inputs:
      - push-check-pull-request
      - pull-request
