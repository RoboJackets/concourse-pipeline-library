---
base_image:

  repository: (( param "What base image is used?" ))
  resource_name: (( param "What should we call the resource for the base image?"))
  tag: (( param "What tag is used?" ))
  icon: (( param "Which icon should be displayed?" ))

destination:

  registry: private
  repository: (( grab repository.name ))

resources:

- name: (( grab base_image.resource_name ))
  type: registry-image
  public: true
  icon: (( grab base_image.icon ))
  source:
    repository: (( grab base_image.repository ))
    tag: (( grab base_image.tag ))
  check_every: 1h
  tags:
  - resources

- name: image
  type: registry-image
  public: true
  icon: docker
  source:
    repository: >-
      (( concat "(( join "/" registry." destination.registry ".hostname "robojackets" destination.repository ))" ))
    tag: latest
    inject: (( concat "(( inject registry." destination.registry ".source ))" ))
  tags:
  - resources

- name: build-check
  public: true
  type: github-check
  icon: check
  source:
    check_name: Build Image
    resource_name: build-check
  tags:
  - resources

- name: push-check
  public: true
  type: github-check
  icon: check
  source:
    check_name: Push to Registry
    resource_name: push-check
  tags:
  - resources

tasks:

  get_base_image:
    get: (( grab base_image.resource_name ))
    trigger: true
    params:
      format: oci

  build_image:
    task: build
    config: (( load "tasks/oci-build.yml" ))
    input_mapping:
      source: (( grab repository.name ))
    params:
      IMAGE_ARG_base_image: (( concat base_image.resource_name "/image.tar" ))
    privileged: true
    timeout: 30m
    on_abort:
      put: build-check
      params:
        conclusion: cancelled
      inputs:
      - build-check
    on_error:
      inject: (( inject tasks.build_image.on_abort ))
      params:
        conclusion: action_required
    on_failure:
      inject: (( inject tasks.build_image.on_abort ))
      params:
        conclusion: failure
        title: Image failed to build
        summary: Review the output within Concourse.

  put_build_check:
    put: build-check
    params:
      conclusion: success
      title: Image built successfully
      summary: The OCI image was built successfully.
    inputs:
    - build-check

  put_image:
    put: image
    params:
      image: image/image.tar
    get_params:
      skip_download: true
    inputs:
    - image
    on_abort:
      put: push-check
      params:
        conclusion: cancelled
      inputs:
      - push-check
    on_error:
      inject: (( inject tasks.put_image.on_abort ))
      params:
        conclusion: action_required
    on_failure:
      inject: (( inject tasks.put_image.on_abort ))
      params:
        conclusion: failure
        title: Image failed to push
        summary: Review the output within Concourse.
    on_success:
      inject: (( inject tasks.put_image.on_abort ))
      params:
        conclusion: success
        title: Image pushed to registry
        summary: The image was successfully uploaded to the registry.
