---
python:
  pathspec: (( param "Which files should be considered sources?" ))

resources:

- name: poetry-install-check
  public: true
  type: github-check
  icon: check
  source:
    check_name: Poetry Install
    resource_name: poetry-install-check
  tags:
  - resources

- name: mypy-check
  public: true
  type: github-check
  icon: check
  source:
    check_name: mypy
    resource_name: mypy-check
  tags:
  - resources

- name: flake8-check
  public: true
  type: github-check
  icon: check
  source:
    check_name: flake8
    resource_name: flake8-check
  tags:
  - resources

- name: pylint-check
  public: true
  type: github-check
  icon: check
  source:
    check_name: pylint
    resource_name: pylint-check
  tags:
  - resources

tasks:

  poetry_install_dev:
    task: poetry-install-dev
    config: (( load "tasks/python/poetry-install-dev.yml" ))
    input_mapping:
      source: (( grab repository.name ))
    on_abort:
      put: poetry-install-check
      params:
        conclusion: cancelled
      inputs:
      - poetry-install-check
    on_error:
      inject: (( inject tasks.poetry_install_dev.on_abort ))
      params:
        conclusion: action_required
    on_failure:
      inject: (( inject tasks.poetry_install_dev.on_abort ))
      params:
        conclusion: failure
        title: Failed to install dependencies
        summary: Review the output within Concourse.

  put_poetry_install_check:
    put: poetry-install-check
    params:
      conclusion: success
      title: Dependencies installed
      summary: Poetry successfully installed development dependencies.
    inputs:
    - poetry-install-check

  flake8:
    do:
    - put: flake8-check
      inputs: []

    - task: flake8
      config: (( load "tasks/python/flake8.yml" ))
      input_mapping:
        source: (( grab repository.name ))
      on_abort:
        put: flake8-check
        params:
          conclusion: cancelled
        inputs:
        - flake8
        - flake8-check
      on_success:
        inject: (( inject tasks.flake8.do.1.on_abort ))
        params:
          conclusion: success
      on_failure:
        inject: (( inject tasks.flake8.do.1.on_abort ))
        params:
          conclusion: failure
      on_error:
        inject: (( inject tasks.flake8.do.1.on_abort ))
        params:
          conclusion: action_required

  pylint:
    do:
    - put: pylint-check
      inputs: []

    - task: pylint
      config: (( load "tasks/python/pylint.yml" ))
      input_mapping:
        source: (( grab repository.name ))
      on_abort:
        put: pylint-check
        params:
          conclusion: cancelled
        inputs:
        - pylint
        - pylint-check
      on_success:
        inject: (( inject tasks.pylint.do.1.on_abort ))
        params:
          conclusion: success
      on_failure:
        inject: (( inject tasks.pylint.do.1.on_abort ))
        params:
          conclusion: failure
      on_error:
        inject: (( inject tasks.pylint.do.1.on_abort ))
        params:
          conclusion: action_required

  mypy:
    do:
    - put: mypy-check
      inputs: []

    - task: mypy
      config: (( load "tasks/python/mypy.yml" ))
      input_mapping:
        source: (( grab repository.name ))
      on_abort:
        put: mypy-check
        params:
          conclusion: cancelled
        inputs:
        - mypy
        - mypy-check
      on_success:
        inject: (( inject tasks.mypy.do.1.on_abort ))
        params:
          conclusion: success
      on_failure:
        inject: (( inject tasks.mypy.do.1.on_abort ))
        params:
          conclusion: failure
      on_error:
        inject: (( inject tasks.mypy.do.1.on_abort ))
        params:
          conclusion: action_required
